<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Ryan's Website</title><description>A website by Ryan.</description><link>http://www.ryanjdavies.com</link><language>en</language><lastBuildDate>Sun, 24 May 2020 15:37:05 +0000</lastBuildDate><pubDate>Sun, 24 May 2020 15:37:05 +0000</pubDate><ttl>250</ttl><atom:link href="http://www.ryanjdavies.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://www.ryanjdavies.com/articles/deploying-to-heroku-on-ipad</guid><title>Deploying to Heroku on an iPad</title><description></description><link>http://www.ryanjdavies.com/articles/deploying-to-heroku-on-ipad</link><pubDate>Sun, 24 May 2020 17:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Deploying to Heroku from an iPad</h1><p>In this article, I'll describe how to deploy applications to Heroku from <a href="https://workingcopyapp.com/">Working Copy</a> on an iPad.</p><p>The typical way to deploy a Heroku app is to push to your application's Git URL, which you get either from the Heroku command line tools or from the application's web dashboard.</p><p>In order to push new changes, you'll need to authenticate with your Heroku command line credentials. These aren't the same as your regular login credentials. If you try and use those (like I did), nothing will happen.</p><p>There are <a href="https://workingcopyapp.com/manual/heruko-remotes">instructions for this in the Working Copy documentation</a>, but I couldn't quite follow them exactly. This is what I had to do to get this working:</p><p>The first step requires authenticating with the <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku Command Line Toolbelt</a>, which (unfortunately) has to be done on a Mac:</p><ol><li>Install Heroku's Command Line Toolbelt.</li><li>Run <code>heroku login</code></li><li>A Heroku sign in prompt will open in your browser. Enter your details if needed and continue.</li><li>Now the Heroku command line tool is authenticated, you can access.</li></ol><p>Then, on your iPad:</p><ol><li>Grab the Heroku application's git URL from application settings.</li><li>In Working Copy, add a new remote for this repository. Name it <code>heroku</code>, and set its URL to the URL we copied from Heroku in the previous step.</li><li>Tap 'Test'. You should get a login prompt: this is where you'll need to enter your regular Heroku email, and then the password you got from logging in with the Heroku Command Line Toolbelt.</li></ol><p>Once done, you should be able to successfully push changes to the <code>heroku</code>remote to trigger an update.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://www.ryanjdavies.com/articles/images-in-playgrounds</guid><title>Images in Playgrounds</title><description></description><link>http://www.ryanjdavies.com/articles/images-in-playgrounds</link><pubDate>Sat, 23 May 2020 16:30:00 +0000</pubDate><content:encoded><![CDATA[<h1>Images in Playgrounds</h1><p>In Xcode playgrounds it's possible to find resources by name, instead of absolute path, to write code like this:</p><pre><code><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"Demo"</span>)
</code></pre><p>In iOS and macOS projects, finding a resource by name is handy because it means making all resources known to the project , which – so long as the resource files are all within the project directory – means the same project can be compiled on another machine without requiring specific and seemingly unrelated directories or files in a separate area of the file system. It's all self-contained.</p><p>In an Xcode playground there's no obvious 'bundle' to draw from. There are no other files, no xcassets – it's just a window of code.</p><p>Fortunately, that doesn't mean images can't be referenced by name. Images must simply be added to a specific 'Resources' directory, which can be seen in the File Inspector of a playground:</p><img src="http://www.ryanjdavies.com/assets/images/2020/05/playground-image-bad-access.png"/><p>(Currently there's an error because there's no image at that location.)</p><p>This Resource Path points to a location within the playground, revealing that it's actually a bundle rather than a file:</p><img src="http://www.ryanjdavies.com/assets/images/2020/05/playground-bundle-contents.png"/><p>Inside are one or more .swift files, some playground specific files, and an empty Resources directory.</p><p>Adding an image to this directory makes it available to the playground:</p><img src="http://www.ryanjdavies.com/assets/images/2020/05/playground-bundle-with-image.png"/><p>That's it! Now it's easy to write snippets for image manipulation or for creating custom views with decoration images to see how they look.</p><img src="http://www.ryanjdavies.com/assets/images/2020/05/playground-with-image.png"/><p>For more information on resources in playgrounds, see <a href="https://developer.apple.com/videos/wwdc/2014/">WWDC 2014 Session 401 "What's New In Xcode 6″</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://www.ryanjdavies.com/articles/simplifying-completion-callbacks</guid><title>Simplifying completion callbacks</title><description></description><link>http://www.ryanjdavies.com/articles/simplifying-completion-callbacks</link><pubDate>Thu, 21 May 2020 22:30:00 +0000</pubDate><content:encoded><![CDATA[<h1>Simplifying completion callbacks</h1><p>It’s commonplace in asynchronous Swift code to have a method return a <code>Result</code> type as an argument to a completion callback. If one of those asynchronous methods calls another, it can require disambiguating the returned <code>Result</code> both in the intermediary layer and at the final call site:</p><pre><code><span class="keyword">struct</span> RegistrationService {
    <span class="keyword">let</span> marketingPreferencesService: <span class="type">MarketingPreferencesService</span>
    
    <span class="keyword">func</span> register(email: <span class="type">String</span>, password: <span class="type">String</span>, subscribe: <span class="type">Bool</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">User</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) {
        <span class="comment">// register the user</span>
        <span class="keyword">var</span> user = <span class="type">User</span>(email: email)
        
        <span class="comment">// if the user didn't want to subscribe, return early</span>
        <span class="keyword">if</span> !subscribe {
            <span class="keyword">return</span> <span class="call">completion</span>(.<span class="call">success</span>(user))
        }
        
        <span class="comment">// if the user did want to subscribe, sign 'em up</span>
        marketingPreferencesService.<span class="call">subscribe</span>(email: email) { result <span class="keyword">in
            switch</span> result {
                <span class="keyword">case</span> .<span class="dotAccess">success</span>:
                    <span class="call">completion</span>(.<span class="call">success</span>(user))
                <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
                    <span class="call">completion</span>(.<span class="call">failure</span>(error))
            }
        }
    }
}

<span class="keyword">let</span> service = <span class="type">RegistrationService</span>(marketingPreferencesService: <span class="type">MarketingPreferencesService</span>())
service.<span class="call">register</span>(email: <span class="string">"ryan@website.com"</span>, password: <span class="string">"password"</span>, subscribe: <span class="keyword">true</span>) { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> user):
        <span class="call">print</span>(user)
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
        <span class="call">print</span>(error)
    }
}
</code></pre><p>In this small example, there are only two switch statements for dealing with the <code>Result</code> type, but in a typical project there could be many types like these that all rely on each other, and that can quickly add up to a whole lot of <code>Result</code> wrangling.</p><p>The final call site would typically have unique behaviour and is harder to generalise. The intermediary calls, though, have a similar pattern. In this case, the call from <code>RegistrationService</code> to <code>marketingPreferencesService</code>:</p><ul><li>Calls the original completion with a different value if the request is successful.</li><li>Passes the error through to the original completion if the request fails.</li></ul><p>This logic can be extracted into a reusable function and used in each service that follows this pattern:</p><pre><code><span class="keyword">func</span> replaceSuccess&lt;Success, NewSuccess, Failure&gt;(with newSuccess: <span class="type">NewSuccess</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">NewSuccess</span>, <span class="type">Failure</span>&gt;) -&gt; <span class="type">Void</span>) -&gt; (<span class="type">Result</span>&lt;<span class="type">Success</span>, <span class="type">Failure</span>&gt;) -&gt; <span class="type">Void</span> {
    { result <span class="keyword">in
        switch</span> result {
            <span class="keyword">case</span> .<span class="dotAccess">success</span>:
                <span class="call">completion</span>(.<span class="call">success</span>(newSuccess))
            <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
                <span class="call">completion</span>(.<span class="call">failure</span>(error))
        }
    }
}
</code></pre><p>This function:</p><ol><li>Has two arguments: the first is the value to use for replacing in case of success, and the second is the completion we want to call with the new success or failure when this function is called.</li><li>Returns the same closure type as is expected for any completion callback: it takes a <code>Result</code> and returns <code>Void</code>.</li></ol><p>The switch statement in <code>RegistrationService</code> can be replaced with:</p><pre><code>marketingPreferencesService.<span class="call">subscribe</span>(email: email, completion: <span class="call">replaceSuccess</span>(with: user, completion: completion))
</code></pre><p>Any other types with a similar approach – in this case, ones that rely on a second asynchronous call for which the result should be ignored – can use the same function. This reduces the amount of code needed, which is a nice improvement, but more importantly it helps to make the approach consistent throughout the codebase.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://www.ryanjdavies.com/articles/snapshotting-and-blurring-views-ios-7</guid><title>Snapshotting and Blurring Views (iOS 7)</title><description></description><link>http://www.ryanjdavies.com/articles/snapshotting-and-blurring-views-ios-7</link><pubDate>Sat, 22 Mar 2014 17:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Apple use an overlaying blur effect throughout iOS 7 to suggest 'depth' to the user, seen in the notification center, control center, and in many of Apple's apps:</p><img src="http://www.ryanjdavies.com/assets/images/2014/03/embrace_translucency_2x2.png"/><p>But how are they achieving this effect? Some expected there to be a new <code>UIView</code> subclass that would automatically blur its background, but no such luck.</p><p>Instead, Apple introduced new, flexible methods on <code>UIView</code> that - along with some WWDC sample code - make it easy for developers to make use of blurring in their apps.</p><h2>Rendering UIKit Content</h2><p>When you apply a blur effect on an image in your image editor it works by performing a complex algorithm on each pixel and its surrounding pixels. iOS is no exception - in order to create a blur effect, we need to create a bitmap image from the view hierarchy we have on screen.</p><p><code>CALayer</code>, the workhorse for each view, has had the <code>-renderInContext:</code> method since iOS 2.0. It renders itself and all sublayers into a graphics context that can then have any effects applied to it before being converted into an image for display.</p><p>Unfortunately, as it runs in the CPU, <code>-renderInContext:</code> can be incredibly slow for complex hierarchies. It also doesn't take any view transforms into account.</p><p>Thankfully Apple introduced new methods on <code>UIView</code> in iOS 7 for creating snapshots of view hierarchies:</p><ul><li><code>snapshotViewAfterScreenUpdates:</code> - the fastest method for creating still snapshots of a view hierarchy. Returns a <code>UIView</code> instance whose layer contents are immutable, which makes it useless for applying blur effects.</li><li><code>resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:</code> - similar to <code>snapshotViewAfterScreenUpdates:</code> but with resizable insets.</li><li><code>drawViewHierarchyInRect:afterScreenUpdates:</code> - draws in the current image context, and according to WWDC 2013 Session 226 is up to 8 times faster than <code>renderInContext:</code>. This is the method we'll be using to apply image effects.</li></ul><p>Drawing a view hierarchy now looks like this:</p><pre><code><span class="type">UIGraphicsBeginImageContext</span>(rect.<span class="property">size</span>);
[view drawViewHierarchyInRect:rect afterScreenUpdates:<span class="type">NO</span>];
<span class="type">UIImage</span> *image = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>();
<span class="type">UIGraphicsEndImageContext</span>();
</code></pre><p>The <code>image</code> object can then be manipulated as needed.</p><h2>Applying the blur effect</h2><p>To achieve an identical blur effect we'll use Apple's sample code, which is available in the UIImageEffects WWDC 2013 sample project. If you have an Apple developer account, you can find it <a href="https://developer.apple.com/downloads/index.action?name=WWDC%202013">here</a>.</p><p>Once that's included in your project, you'll also need a view hierarchy to blur. I'm using a simple rainbow image to see a colourful blur:</p><img src="http://www.ryanjdavies.com/assets/images/2014/03/ios-simulator-screen-shot-22-mar-2014-20-30-31.png"/><p>Now you can import <code>UIImage+ImageEffects.h</code> and call <code>-applyLightEffect</code> on the <code>UIImage</code> you generated from the view hierarchy:</p><pre><code><span class="type">UIImage</span> *blurredImage = [image applyLightEffect];
</code></pre><p>That's it! All that's left is to render the image:</p><img src="http://www.ryanjdavies.com/assets/images/2014/03/ios-simulator-screen-shot-22-mar-2014-20-30-33.png"/><p>You can see Apple's engineers discuss snapshotting and the iOS 7 blur effect in <a href="https://developer.apple.com/videos/wwdc/2013/">WWDC 2013 Session 226</a>. You can also read about Apple's stance on user interface depth in the <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/MobileHIG/index.html">iOS Human Interface Guidelines</a>.</p>]]></content:encoded></item></channel></rss>